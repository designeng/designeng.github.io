define({$plugins:["wire/on","wire/dom","wire/dom/render","wire/aop","core/plugin/template/hb","core/plugin/form/validate","core/plugin/form/latinRegistration","core/plugin/template/bind","core/plugin/data/structure/model"],synchronizeWithRoute:function(){return this.controller.synchronizeWithRoute(),this.doubleNamesValidation.synchronizeWithRoute()},passengerFormView:{render:{template:{$ref:"passengerFormTemplate"}},insert:{at:{$ref:"formWrapper"}},bind:{to:{$ref:"personFormModel"}}},citizenshipOptions:{create:{module:"components/offer/passenger/form/citizenshipOptions",args:[{$ref:"dictionariesCountriesCollection"}]}},passengerFormTemplate:{templateSource:{pattern:{$ref:"passengerFormPattern"},fillWith:{citizenshipOptions:{$ref:"citizenshipOptions"},isBonusCardProgram:{$ref:"flightOfferResponse.isBonusCardProgram"},airCompanyOptions:{$ref:"flightOfferResponse.airCompany"},placeholderFirstName:{$ref:"placeholderFirstName"},placeholderLastName:{$ref:"placeholderLastName"}}}},passengerFormPattern:{module:"hbs!components/offer/passenger/form/form"},nameException:{module:"components/offer/passenger/form/nameException"},documentTypes:{create:{module:"components/offer/passenger/form/documentTypes",args:[{$ref:"flightOfferResponse"},{$ref:"dictionariesDocumentTypesCollection"}]}},birthDateValidation:{create:"components/offer/passenger/form/rules/birthDateValidation",properties:{pageModel:{$ref:"pageModel"},response:{$ref:"flightOfferResponse"}}},citizenshipValidation:{create:{module:"components/offer/passenger/form/rules/citizenshipValidation"}},documentValidation:{create:"components/offer/passenger/form/rules/documentValidation",properties:{pageModel:{$ref:"pageModel"},isRussianDocumentsZone:{$ref:"flightOfferResponse.isRussianDocumentsZone"},baseFligthDateTime:{$ref:"flightOfferResponse.baseFligthDateTime"},documentTypes:{$ref:"documentTypes"},personsCollection:{$ref:"personsCollection"}},ready:{onReady:{}}},validUntilValidation:{create:"components/offer/passenger/form/rules/validUntilValidation",properties:{response:{$ref:"flightOfferResponse"}}},bonusCardNumberValidation:{create:"components/offer/passenger/form/rules/bonusCardNumberValidation",properties:{pageModel:{$ref:"pageModel"}}},airCompanyValidation:{create:"components/offer/passenger/form/rules/airCompanyValidation",properties:{flightOfferResponse:{$ref:"flightOfferResponse"}},init:{onInit:{}}},doubleNamesValidation:{create:"components/offer/passenger/form/rules/doubleNamesValidation",properties:{personsCollection:{$ref:"personsCollection"},pageModel:{$ref:"pageModel"}}},normalizeValue:{module:"core/util/date/normalizeValue"},formFieldsStrategy:{gender:{common:{message:!1},genderRule:{rule:function(e){return e==="male"||e==="female"?!0:!1}}},firstName:{firstNameCommonRule:{rule:{$ref:"latinRegistration!",response:{$ref:"flightOfferResponse"},mode:"rule"},message:{$ref:"latinRegistration!Введите имя",response:{$ref:"flightOfferResponse"}}},firstNameExceptionRule:{rule:{$ref:"nameException"},message:"Пожалуйста, введите настоящее имя"},firstDoubleNamesValidationRule:{rule:{$ref:"doubleNamesValidation.nameUniquenessRule"},message:"Фамилии и имена пассажиров не должны совпадать",dependsOn:"lastName"}},lastName:{lastNameCommonRule:{rule:{$ref:"latinRegistration!",response:{$ref:"flightOfferResponse"},mode:"rule"},message:{$ref:"latinRegistration!Введите фамилию",response:{$ref:"flightOfferResponse"}}},lastNameExceptionRule:{rule:{$ref:"nameException"},message:"Пожалуйста, введите настоящую фамилию"},lastDoubleNamesValidationRule:{rule:{$ref:"doubleNamesValidation.nameUniquenessRule"},message:"Фамилии и имена пассажиров не должны совпадать",dependsOn:"firstName"}},birthDate:{common:{transform:{$ref:"normalizeValue"}},validMomentRule:{rule:{$ref:"birthDateValidation.validMomentRule"}},categoryRule:{rule:{$ref:"birthDateValidation.categoryRule"},message:"Введенная дата не соответствует категории пассажира"},isBeforeRule:{rule:{$ref:"birthDateValidation.isBeforeRule"},message:"Дата рождения должна быть не позже текущей"},isAfterMinMomentRule:{rule:{$ref:"birthDateValidation.isAfterMinMomentRule"},message:"Введенная дата не соответствует категории пассажира",invoke:{name:"document",condition:"not blank"}}},citizenship:{citizenshipRule:{rule:{$ref:"citizenshipValidation.citizenshipRule"},message:"Выберите гражданство",invoke:{name:"document",condition:"not blank"}}},document:{documentRule:{rule:{$ref:"documentValidation.documentTypeRule"},message:"Введите серию и номер документа",dependsOn:"citizenship, birthDate"}},validUntil:{common:{transform:{$ref:"normalizeValue"}},validMomentRule:{rule:{$ref:"validUntilValidation.validMomentRule"},message:"Пожалуйста, заполните это поле"},documentExpirationDateRule:{rule:{$ref:"validUntilValidation.documentExpirationDateRule"},message:"Документ должен быть действителен в течение всей поездки"}},airCompany:{common:{optional:!0},airCompanyRule:{rule:{$ref:"airCompanyValidation.rule"},message:"Авиакомпания не выбрана",dependsOn:"bonusCardNumber"}},bonusCardNumber:{common:{optional:!0},bonusCardNumberRule:{rule:{$ref:"bonusCardNumberValidation.rule"},message:"Введите номер бонусной карты слитно (без пробелов и разделителей)"}}},controller:{create:"components/offer/passenger/form/controller",properties:{formWrapper:{$ref:"formWrapper"},passengerFormView:{$ref:"passengerFormView"},passengerFormPattern:{$ref:"passengerFormPattern"},citizenshipValidation:{$ref:"citizenshipValidation"},personsCollection:{$ref:"personsCollection"},baseOfferHash:{$ref:"baseOfferHash"},flightOfferResponse:{$ref:"flightOfferResponse"},personFormModel:{$ref:"personFormModel"},pageModel:{$ref:"pageModel"}},init:{onInit:{}},ready:{onReady:{}},after:{onReady:"browsersCompability"},on:{passengerFormView:{"click:#male":"onRadioChecked","click:#female":"onRadioChecked",submit:"onSubmit"}},validate:{form:{$ref:"passengerFormView"},strategy:{$ref:"formFieldsStrategy"},displaySlot:{$ref:"dom.first!.validatorForm__passenger",at:"pageView"},displaySlotClass:"validatorForm__passenger",successHandler:{$ref:"controller.successHandler"},streamsHooks:{focus:{hook:{$ref:"controller.validUntilFocusHook"},insertBefore:"getRegisteredError"},change:{hook:{$ref:"controller.bonusCardNumberHook"},insertAfter:"highLight"}}}}});
